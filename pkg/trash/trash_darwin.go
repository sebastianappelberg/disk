//go:build darwin

// Package trash.
// This file contains code from the project github.com/Kei-K23/trashbox,
// with modifications to fit the rest of the project.
// Source: https://github.com/Kei-K23/trashbox.
// License: MIT
package trash

import (
	"encoding/json"
	"os"
	"path/filepath"
	"time"
)

type metadata struct {
	OriginalPath string    `json:"original_path"`
	Filename     string    `json:"file_name"`
	DeletedAt    time.Time `json:"deleted_at"`
	Size         int64     `json:"size"`
}

var trashDir = filepath.Join(os.Getenv("HOME"), ".Trash")

const trashboxMetadataExt = ".trashbox.metadata.json"

// Put moves the specified files or directories to the system's Trash directory.
// This function generates a metadata file in the Trash for potential recovery.
//
// Parameters:
//
//	filePaths (...string): The file paths of the files or directories to be moved to Trash.
//
// Returns:
//
//	error: Returns an error if the file cannot be moved to Trash or if there are issues
//	       in creating the metadata file. Returns nil if successful.
//
// Example usage:
//
//	err := Put("/path/to/file.txt")
//	if err != nil {
//	    log.Fatalf("Failed to move file to Trash: %v", err)
//	}
//
// Notes:
//   - On success, a metadata file is created in the Trash directory that stores the
//     original location of the deleted file. This enables the file to be put back
//     using the Restore function.
//   - The function is currently tailored for macOS systems.
func Put(filePaths ...string) error {
	for _, filePath := range filePaths {
		err := put(filePath)
		if err != nil {
			return err
		}
	}
	return nil
}

func put(path string) error {
	// Get the absolute file path of delete file
	absPath, err := filepath.Abs(path)
	if err != nil {
		return err
	}

	info, err := os.Stat(absPath)
	if err != nil {
		return err
	}

	// Get the trash file path to move to .Trash directory
	trashPath := filepath.Join(trashDir, filepath.Base(path))
	// Move the file to .Trash directory
	err = os.Rename(absPath, trashPath)
	if err != nil {
		return err
	}

	// Create metadata file for recovery the deleted file
	metadata := metadata{OriginalPath: absPath, DeletedAt: time.Now(), Size: info.Size(), Filename: info.Name()}
	metadataPath := trashPath + trashboxMetadataExt

	// Create metadata file in Trash bin
	metadataFile, err := os.Create(metadataPath)
	if err != nil {
		return err
	}
	defer metadataFile.Close()

	encoder := json.NewEncoder(metadataFile)
	err = encoder.Encode(metadata)
	if err != nil {
		return err
	}

	return nil
}

// Restore restores a previously deleted file from the Trash to its original location.
// The original location is determined from the metadata generated when the file was moved to Trash.
//
// Parameters:
//
//	path (string): The name of the file or directory to be restored from Trash.
//
// Returns:
//
//	error: Returns an error if the file cannot be restored or if there are issues
//	       with reading the metadata file. Returns nil if successful.
//
// Example usage:
//
//	err := Restore("file.txt")
//	if err != nil {
//	    log.Fatalf("Failed to put back file from Trash: %v", err)
//	}
//
// Notes:
//   - The function depends on a metadata file (generated by Put) being present
//     in the Trash directory, which contains the original path.
//   - On success, the metadata file is removed from the Trash.
func Restore(path string) error {
	// Get the Trash box path and metadata path
	trashPath := filepath.Join(trashDir, path)
	metadataPath := trashPath + trashboxMetadataExt

	// Open metadata file to get original file path
	metadataFile, err := os.Open(metadataPath)
	if err != nil {
		return err
	}
	defer metadataFile.Close()

	var metadata metadata
	decoder := json.NewDecoder(metadataFile)
	err = decoder.Decode(&metadata)
	if err != nil {
		return err
	}

	// Put back file to original path
	err = os.Rename(trashPath, metadata.OriginalPath)
	if err != nil {
		return err
	}

	// Remove the metadata file
	err = os.Remove(metadataPath)
	if err != nil {
		return err
	}

	return nil
}
